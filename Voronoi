Shader "Noises/Voronoi"
{
	SubShader
	{

		Pass
		{
			CGPROGRAM
			#pragma vertex vert
			#pragma fragment frag
			
			#include "UnityCG.cginc"

			struct appdata
			{
				float4 vertex : POSITION;
				float2 uv : TEXCOORD0;
			};

			struct v2f
			{
				float2 uv : TEXCOORD0;
				float4 vertex : SV_POSITION;
			};

			v2f vert (appdata v)
			{
				v2f o;
				o.vertex = UnityObjectToClipPos(v.vertex);
				o.uv = v.uv;
				return o;
			}
			
			sampler2D _MainTex;

			// Author: Stefan Gustavson
			// Title: Classic 2D cellular noise

			// Permutation polynomial: (34x^2 + x) fmod 289
			fixed3 permute(fixed3 x) {
			return fmod((34.0 * x + 1.0) * x, 289.0);
			}

			fixed3 mod(fixed3 x, fixed3 y)
			{
			return x - y * floor(x/y);
			}

			// Cellular noise, returning F1 and F2 in a fixed2.
			// Standard 3x3 search window for good F1 and F2 values
			fixed2 cellular(fixed2 P) {
			#define K 0.142857142857 // 1/7
			#define Ko 0.428571428571 // 3/7
			#define jitter 1.0 // Less gives more regular pattern
			fixed2 Pi = mod(fixed3(floor(P),1), fixed3(1,1,1)*289.0).xy;
			fixed2 Pf = frac(P);
			fixed3 oi = fixed3(-1.0, 0.0, 1.0);
			fixed3 of = fixed3(-0.5, 0.5, 1.5);
			fixed3 px = permute(Pi.x + oi);
			fixed3 p = permute(px.x + Pi.y + oi); // p11, p12, p13
			fixed3 ox = frac(p*K) - Ko;
			fixed3 oy = mod(floor(p*K),7.0)*K - Ko;
			fixed3 dx = Pf.x + 0.5 + jitter*ox;
			fixed3 dy = Pf.y - of + jitter*oy;
			fixed3 d1 = dx * dx + dy * dy; // d11, d12 and d13, squared
			p = permute(px.y + Pi.y + oi); // p21, p22, p23
			ox = frac(p*K) - Ko;
			oy = mod(floor(p*K),7.0)*K - Ko;
			dx = Pf.x - 0.5 + jitter*ox;
			dy = Pf.y - of + jitter*oy;
			fixed3 d2 = dx * dx + dy * dy; // d21, d22 and d23, squared
			p = permute(px.z + Pi.y + oi); // p31, p32, p33
			ox = frac(p*K) - Ko;
			oy = mod(floor(p*K),7.0)*K - Ko;
			dx = Pf.x - 1.5 + jitter*ox;
			dy = Pf.y - of + jitter*oy;
			fixed3 d3 = dx * dx + dy * dy; // d31, d32 and d33, squared
			// Sort out the two smallest distances (F1, F2)
			fixed3 d1a = min(d1, d2);
			d2 = max(d1, d2); // Swap to keep candidates for F2
			d2 = min(d2, d3); // neither F1 nor F2 are now in d3
			d1 = min(d1a, d2); // F1 is now in d1
			d2 = max(d1a, d2); // Swap to keep candidates for F2
			d1.xy = (d1.x < d1.y) ? d1.xy : d1.yx; // Swap if smaller
			d1.xz = (d1.x < d1.z) ? d1.xz : d1.zx; // F1 is in d1.x
			d1.yz = min(d1.yz, d2.yz); // F2 is now not in d2.yz
			d1.y = min(d1.y, d1.z); // nor in  d1.z
			d1.y = min(d1.y, d2.x); // F2 is in d1.y, we're done.
			return sqrt(d1.xy);
			}

			fixed4 frag (v2f i) : SV_Target
			{
			fixed2 st =i.uv;
			st *= 10.;
			fixed2 F = cellular(st);
			float facets = 0.1+(F.y-F.x);
			float dots = smoothstep(0.05, 0.1, F.x);
			float n = facets * dots;
			return fixed4(n, n, n, 1.0);
			}
			ENDCG
		}
	}
}
